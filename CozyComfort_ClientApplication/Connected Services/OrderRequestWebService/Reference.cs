//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CozyComfort_ClientApplication.OrderRequestWebService {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="OrderRequestWebService.OrderRequestsWebServiceSoap")]
    public interface OrderRequestsWebServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/autoOrderID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string autoOrderID();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/autoOrderID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> autoOrderIDAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/autoRequestToDistributorID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string autoRequestToDistributorID();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/autoRequestToDistributorID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> autoRequestToDistributorIDAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/autoRequestToManufacturerID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string autoRequestToManufacturerID();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/autoRequestToManufacturerID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> autoRequestToManufacturerIDAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/makeOrder", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string makeOrder(string orderID, string sellerID, string blanketID, int requestQty, decimal totalCost, System.DateTime dateOfOrder, string defaultStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/makeOrder", ReplyAction="*")]
        System.Threading.Tasks.Task<string> makeOrderAsync(string orderID, string sellerID, string blanketID, int requestQty, decimal totalCost, System.DateTime dateOfOrder, string defaultStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/calculateTotalCost", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        decimal calculateTotalCost(decimal price, int quantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/calculateTotalCost", ReplyAction="*")]
        System.Threading.Tasks.Task<decimal> calculateTotalCostAsync(decimal price, int quantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getAllOrderDetailsForSeller", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet getAllOrderDetailsForSeller(string sellerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getAllOrderDetailsForSeller", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> getAllOrderDetailsForSellerAsync(string sellerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/acceptPendingOrder", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string acceptPendingOrder(string orderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/acceptPendingOrder", ReplyAction="*")]
        System.Threading.Tasks.Task<string> acceptPendingOrderAsync(string orderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/sendRequestToDistributor", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string sendRequestToDistributor(string requestID, string sellerID, string distributorID, string blanketID, int qty, string status, System.DateTime requestedTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/sendRequestToDistributor", ReplyAction="*")]
        System.Threading.Tasks.Task<string> sendRequestToDistributorAsync(string requestID, string sellerID, string distributorID, string blanketID, int qty, string status, System.DateTime requestedTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getAllRequestsSentToDistributor", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet getAllRequestsSentToDistributor(string sellerID, string distributorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getAllRequestsSentToDistributor", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> getAllRequestsSentToDistributorAsync(string sellerID, string distributorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getAllRequestsForDistributor", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet getAllRequestsForDistributor(string distributorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getAllRequestsForDistributor", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> getAllRequestsForDistributorAsync(string distributorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/updateStatusForDistributorRequest", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string updateStatusForDistributorRequest(string requestID, string newStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/updateStatusForDistributorRequest", ReplyAction="*")]
        System.Threading.Tasks.Task<string> updateStatusForDistributorRequestAsync(string requestID, string newStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/sendRequestToManufacturer", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string sendRequestToManufacturer(string requestID, string distributorID, string blanketID, int qty, string status, System.DateTime requestedTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/sendRequestToManufacturer", ReplyAction="*")]
        System.Threading.Tasks.Task<string> sendRequestToManufacturerAsync(string requestID, string distributorID, string blanketID, int qty, string status, System.DateTime requestedTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getAllRequestsForManufacturer", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet getAllRequestsForManufacturer();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getAllRequestsForManufacturer", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> getAllRequestsForManufacturerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getAllRequestsSentToManufacturer", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet getAllRequestsSentToManufacturer(string distributorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getAllRequestsSentToManufacturer", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> getAllRequestsSentToManufacturerAsync(string distributorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/updateStatusForManufacturerRequest", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string updateStatusForManufacturerRequest(string requestID, string newStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/updateStatusForManufacturerRequest", ReplyAction="*")]
        System.Threading.Tasks.Task<string> updateStatusForManufacturerRequestAsync(string requestID, string newStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/sendInformationToDistributor", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string sendInformationToDistributor(string requestID, string information);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/sendInformationToDistributor", ReplyAction="*")]
        System.Threading.Tasks.Task<string> sendInformationToDistributorAsync(string requestID, string information);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/sendInformationToSeller", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string sendInformationToSeller(string requestID, string information);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/sendInformationToSeller", ReplyAction="*")]
        System.Threading.Tasks.Task<string> sendInformationToSellerAsync(string requestID, string information);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface OrderRequestsWebServiceSoapChannel : CozyComfort_ClientApplication.OrderRequestWebService.OrderRequestsWebServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OrderRequestsWebServiceSoapClient : System.ServiceModel.ClientBase<CozyComfort_ClientApplication.OrderRequestWebService.OrderRequestsWebServiceSoap>, CozyComfort_ClientApplication.OrderRequestWebService.OrderRequestsWebServiceSoap {
        
        public OrderRequestsWebServiceSoapClient() {
        }
        
        public OrderRequestsWebServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public OrderRequestsWebServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OrderRequestsWebServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OrderRequestsWebServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string autoOrderID() {
            return base.Channel.autoOrderID();
        }
        
        public System.Threading.Tasks.Task<string> autoOrderIDAsync() {
            return base.Channel.autoOrderIDAsync();
        }
        
        public string autoRequestToDistributorID() {
            return base.Channel.autoRequestToDistributorID();
        }
        
        public System.Threading.Tasks.Task<string> autoRequestToDistributorIDAsync() {
            return base.Channel.autoRequestToDistributorIDAsync();
        }
        
        public string autoRequestToManufacturerID() {
            return base.Channel.autoRequestToManufacturerID();
        }
        
        public System.Threading.Tasks.Task<string> autoRequestToManufacturerIDAsync() {
            return base.Channel.autoRequestToManufacturerIDAsync();
        }
        
        public string makeOrder(string orderID, string sellerID, string blanketID, int requestQty, decimal totalCost, System.DateTime dateOfOrder, string defaultStatus) {
            return base.Channel.makeOrder(orderID, sellerID, blanketID, requestQty, totalCost, dateOfOrder, defaultStatus);
        }
        
        public System.Threading.Tasks.Task<string> makeOrderAsync(string orderID, string sellerID, string blanketID, int requestQty, decimal totalCost, System.DateTime dateOfOrder, string defaultStatus) {
            return base.Channel.makeOrderAsync(orderID, sellerID, blanketID, requestQty, totalCost, dateOfOrder, defaultStatus);
        }
        
        public decimal calculateTotalCost(decimal price, int quantity) {
            return base.Channel.calculateTotalCost(price, quantity);
        }
        
        public System.Threading.Tasks.Task<decimal> calculateTotalCostAsync(decimal price, int quantity) {
            return base.Channel.calculateTotalCostAsync(price, quantity);
        }
        
        public System.Data.DataSet getAllOrderDetailsForSeller(string sellerID) {
            return base.Channel.getAllOrderDetailsForSeller(sellerID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getAllOrderDetailsForSellerAsync(string sellerID) {
            return base.Channel.getAllOrderDetailsForSellerAsync(sellerID);
        }
        
        public string acceptPendingOrder(string orderID) {
            return base.Channel.acceptPendingOrder(orderID);
        }
        
        public System.Threading.Tasks.Task<string> acceptPendingOrderAsync(string orderID) {
            return base.Channel.acceptPendingOrderAsync(orderID);
        }
        
        public string sendRequestToDistributor(string requestID, string sellerID, string distributorID, string blanketID, int qty, string status, System.DateTime requestedTime) {
            return base.Channel.sendRequestToDistributor(requestID, sellerID, distributorID, blanketID, qty, status, requestedTime);
        }
        
        public System.Threading.Tasks.Task<string> sendRequestToDistributorAsync(string requestID, string sellerID, string distributorID, string blanketID, int qty, string status, System.DateTime requestedTime) {
            return base.Channel.sendRequestToDistributorAsync(requestID, sellerID, distributorID, blanketID, qty, status, requestedTime);
        }
        
        public System.Data.DataSet getAllRequestsSentToDistributor(string sellerID, string distributorID) {
            return base.Channel.getAllRequestsSentToDistributor(sellerID, distributorID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getAllRequestsSentToDistributorAsync(string sellerID, string distributorID) {
            return base.Channel.getAllRequestsSentToDistributorAsync(sellerID, distributorID);
        }
        
        public System.Data.DataSet getAllRequestsForDistributor(string distributorID) {
            return base.Channel.getAllRequestsForDistributor(distributorID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getAllRequestsForDistributorAsync(string distributorID) {
            return base.Channel.getAllRequestsForDistributorAsync(distributorID);
        }
        
        public string updateStatusForDistributorRequest(string requestID, string newStatus) {
            return base.Channel.updateStatusForDistributorRequest(requestID, newStatus);
        }
        
        public System.Threading.Tasks.Task<string> updateStatusForDistributorRequestAsync(string requestID, string newStatus) {
            return base.Channel.updateStatusForDistributorRequestAsync(requestID, newStatus);
        }
        
        public string sendRequestToManufacturer(string requestID, string distributorID, string blanketID, int qty, string status, System.DateTime requestedTime) {
            return base.Channel.sendRequestToManufacturer(requestID, distributorID, blanketID, qty, status, requestedTime);
        }
        
        public System.Threading.Tasks.Task<string> sendRequestToManufacturerAsync(string requestID, string distributorID, string blanketID, int qty, string status, System.DateTime requestedTime) {
            return base.Channel.sendRequestToManufacturerAsync(requestID, distributorID, blanketID, qty, status, requestedTime);
        }
        
        public System.Data.DataSet getAllRequestsForManufacturer() {
            return base.Channel.getAllRequestsForManufacturer();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getAllRequestsForManufacturerAsync() {
            return base.Channel.getAllRequestsForManufacturerAsync();
        }
        
        public System.Data.DataSet getAllRequestsSentToManufacturer(string distributorID) {
            return base.Channel.getAllRequestsSentToManufacturer(distributorID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getAllRequestsSentToManufacturerAsync(string distributorID) {
            return base.Channel.getAllRequestsSentToManufacturerAsync(distributorID);
        }
        
        public string updateStatusForManufacturerRequest(string requestID, string newStatus) {
            return base.Channel.updateStatusForManufacturerRequest(requestID, newStatus);
        }
        
        public System.Threading.Tasks.Task<string> updateStatusForManufacturerRequestAsync(string requestID, string newStatus) {
            return base.Channel.updateStatusForManufacturerRequestAsync(requestID, newStatus);
        }
        
        public string sendInformationToDistributor(string requestID, string information) {
            return base.Channel.sendInformationToDistributor(requestID, information);
        }
        
        public System.Threading.Tasks.Task<string> sendInformationToDistributorAsync(string requestID, string information) {
            return base.Channel.sendInformationToDistributorAsync(requestID, information);
        }
        
        public string sendInformationToSeller(string requestID, string information) {
            return base.Channel.sendInformationToSeller(requestID, information);
        }
        
        public System.Threading.Tasks.Task<string> sendInformationToSellerAsync(string requestID, string information) {
            return base.Channel.sendInformationToSellerAsync(requestID, information);
        }
    }
}
