//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CozyComfort_ClientApplication.InventoryWebService {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="InventoryWebService.InventoryWebServiceSoap")]
    public interface InventoryWebServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/setStock", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string setStock(string blanketID, int quantity, int capacity, int leadTimeDays, System.DateTime lastUpdated);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/setStock", ReplyAction="*")]
        System.Threading.Tasks.Task<string> setStockAsync(string blanketID, int quantity, int capacity, int leadTimeDays, System.DateTime lastUpdated);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/addStockForManufacturer", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool addStockForManufacturer(string blanketID, int newStock);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/addStockForManufacturer", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> addStockForManufacturerAsync(string blanketID, int newStock);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/reduceStockForManufacturer", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool reduceStockForManufacturer(string blanketID, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/reduceStockForManufacturer", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> reduceStockForManufacturerAsync(string blanketID, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/isBlanketAvailableForManufacturer", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool isBlanketAvailableForManufacturer(string blanketID, int requestQuantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/isBlanketAvailableForManufacturer", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> isBlanketAvailableForManufacturerAsync(string blanketID, int requestQuantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getProductionCapacityAndLeadTime", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet getProductionCapacityAndLeadTime(string blanketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getProductionCapacityAndLeadTime", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> getProductionCapacityAndLeadTimeAsync(string blanketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/isBlanketAvailableForDistributor", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool isBlanketAvailableForDistributor(string blanketID, int requestQuantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/isBlanketAvailableForDistributor", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> isBlanketAvailableForDistributorAsync(string blanketID, int requestQuantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/setStockDistributor", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string setStockDistributor(string distributorID, string blanketID, int amount, System.DateTime lastUpdated);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/setStockDistributor", ReplyAction="*")]
        System.Threading.Tasks.Task<string> setStockDistributorAsync(string distributorID, string blanketID, int amount, System.DateTime lastUpdated);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/addStockForDistributor", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool addStockForDistributor(string distributorID, string blanketID, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/addStockForDistributor", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> addStockForDistributorAsync(string distributorID, string blanketID, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/reduceStockForDistributor", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool reduceStockForDistributor(string distributorID, string blanketID, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/reduceStockForDistributor", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> reduceStockForDistributorAsync(string distributorID, string blanketID, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/isBlanketAvailableForSeller", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool isBlanketAvailableForSeller(string blanketID, int requestQuantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/isBlanketAvailableForSeller", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> isBlanketAvailableForSellerAsync(string blanketID, int requestQuantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/addStockForSeller", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool addStockForSeller(string sellerID, string blanketID, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/addStockForSeller", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> addStockForSellerAsync(string sellerID, string blanketID, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/reduceStockForSeller", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool reduceStockForSeller(string sellerID, string blanketID, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/reduceStockForSeller", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> reduceStockForSellerAsync(string sellerID, string blanketID, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/setStockSeller", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string setStockSeller(string sellerID, string blanketID, int amount, System.DateTime lastUpdated);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/setStockSeller", ReplyAction="*")]
        System.Threading.Tasks.Task<string> setStockSellerAsync(string sellerID, string blanketID, int amount, System.DateTime lastUpdated);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface InventoryWebServiceSoapChannel : CozyComfort_ClientApplication.InventoryWebService.InventoryWebServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InventoryWebServiceSoapClient : System.ServiceModel.ClientBase<CozyComfort_ClientApplication.InventoryWebService.InventoryWebServiceSoap>, CozyComfort_ClientApplication.InventoryWebService.InventoryWebServiceSoap {
        
        public InventoryWebServiceSoapClient() {
        }
        
        public InventoryWebServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public InventoryWebServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InventoryWebServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InventoryWebServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string setStock(string blanketID, int quantity, int capacity, int leadTimeDays, System.DateTime lastUpdated) {
            return base.Channel.setStock(blanketID, quantity, capacity, leadTimeDays, lastUpdated);
        }
        
        public System.Threading.Tasks.Task<string> setStockAsync(string blanketID, int quantity, int capacity, int leadTimeDays, System.DateTime lastUpdated) {
            return base.Channel.setStockAsync(blanketID, quantity, capacity, leadTimeDays, lastUpdated);
        }
        
        public bool addStockForManufacturer(string blanketID, int newStock) {
            return base.Channel.addStockForManufacturer(blanketID, newStock);
        }
        
        public System.Threading.Tasks.Task<bool> addStockForManufacturerAsync(string blanketID, int newStock) {
            return base.Channel.addStockForManufacturerAsync(blanketID, newStock);
        }
        
        public bool reduceStockForManufacturer(string blanketID, int amount) {
            return base.Channel.reduceStockForManufacturer(blanketID, amount);
        }
        
        public System.Threading.Tasks.Task<bool> reduceStockForManufacturerAsync(string blanketID, int amount) {
            return base.Channel.reduceStockForManufacturerAsync(blanketID, amount);
        }
        
        public bool isBlanketAvailableForManufacturer(string blanketID, int requestQuantity) {
            return base.Channel.isBlanketAvailableForManufacturer(blanketID, requestQuantity);
        }
        
        public System.Threading.Tasks.Task<bool> isBlanketAvailableForManufacturerAsync(string blanketID, int requestQuantity) {
            return base.Channel.isBlanketAvailableForManufacturerAsync(blanketID, requestQuantity);
        }
        
        public System.Data.DataSet getProductionCapacityAndLeadTime(string blanketID) {
            return base.Channel.getProductionCapacityAndLeadTime(blanketID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> getProductionCapacityAndLeadTimeAsync(string blanketID) {
            return base.Channel.getProductionCapacityAndLeadTimeAsync(blanketID);
        }
        
        public bool isBlanketAvailableForDistributor(string blanketID, int requestQuantity) {
            return base.Channel.isBlanketAvailableForDistributor(blanketID, requestQuantity);
        }
        
        public System.Threading.Tasks.Task<bool> isBlanketAvailableForDistributorAsync(string blanketID, int requestQuantity) {
            return base.Channel.isBlanketAvailableForDistributorAsync(blanketID, requestQuantity);
        }
        
        public string setStockDistributor(string distributorID, string blanketID, int amount, System.DateTime lastUpdated) {
            return base.Channel.setStockDistributor(distributorID, blanketID, amount, lastUpdated);
        }
        
        public System.Threading.Tasks.Task<string> setStockDistributorAsync(string distributorID, string blanketID, int amount, System.DateTime lastUpdated) {
            return base.Channel.setStockDistributorAsync(distributorID, blanketID, amount, lastUpdated);
        }
        
        public bool addStockForDistributor(string distributorID, string blanketID, int amount) {
            return base.Channel.addStockForDistributor(distributorID, blanketID, amount);
        }
        
        public System.Threading.Tasks.Task<bool> addStockForDistributorAsync(string distributorID, string blanketID, int amount) {
            return base.Channel.addStockForDistributorAsync(distributorID, blanketID, amount);
        }
        
        public bool reduceStockForDistributor(string distributorID, string blanketID, int amount) {
            return base.Channel.reduceStockForDistributor(distributorID, blanketID, amount);
        }
        
        public System.Threading.Tasks.Task<bool> reduceStockForDistributorAsync(string distributorID, string blanketID, int amount) {
            return base.Channel.reduceStockForDistributorAsync(distributorID, blanketID, amount);
        }
        
        public bool isBlanketAvailableForSeller(string blanketID, int requestQuantity) {
            return base.Channel.isBlanketAvailableForSeller(blanketID, requestQuantity);
        }
        
        public System.Threading.Tasks.Task<bool> isBlanketAvailableForSellerAsync(string blanketID, int requestQuantity) {
            return base.Channel.isBlanketAvailableForSellerAsync(blanketID, requestQuantity);
        }
        
        public bool addStockForSeller(string sellerID, string blanketID, int amount) {
            return base.Channel.addStockForSeller(sellerID, blanketID, amount);
        }
        
        public System.Threading.Tasks.Task<bool> addStockForSellerAsync(string sellerID, string blanketID, int amount) {
            return base.Channel.addStockForSellerAsync(sellerID, blanketID, amount);
        }
        
        public bool reduceStockForSeller(string sellerID, string blanketID, int amount) {
            return base.Channel.reduceStockForSeller(sellerID, blanketID, amount);
        }
        
        public System.Threading.Tasks.Task<bool> reduceStockForSellerAsync(string sellerID, string blanketID, int amount) {
            return base.Channel.reduceStockForSellerAsync(sellerID, blanketID, amount);
        }
        
        public string setStockSeller(string sellerID, string blanketID, int amount, System.DateTime lastUpdated) {
            return base.Channel.setStockSeller(sellerID, blanketID, amount, lastUpdated);
        }
        
        public System.Threading.Tasks.Task<string> setStockSellerAsync(string sellerID, string blanketID, int amount, System.DateTime lastUpdated) {
            return base.Channel.setStockSellerAsync(sellerID, blanketID, amount, lastUpdated);
        }
    }
}
